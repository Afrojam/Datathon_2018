setDT(cross_st)
setnames(cross_st, "V1", "sta1")
setnames(cross_st, "V2", "sta2")
cross_st <- merge(cross_st, stations, by.x = "sta1", by.y="id_station", all.x=T)
setnames(cross_st, "lat", "lat1")
setnames(cross_st, "lon", "lon1")
cross_st <- merge(cross_st, stations, by.x = "sta2", by.y="id_station", all.x=T)
setnames(cross_st, "lat", "lat2")
setnames(cross_st, "lon", "lon2")
D <- c()
for (i in 1:nrow(cross_st)) {
line <- cross_st[i,]
d <- compute_distance(as.numeric(line$lat1),
as.numeric(line$lon1),
as.numeric(line$lat2),
as.numeric(line$lon2))
D <- c(D, d)
}
cross_st$dist <- D
my_accuracy <- function(v_real, v_FC) {
V <- -(log(v_FC)*v_real)
return (V)
}
MAPE_accuracy <- function(v_real, v_FC) {
V <- (abs(v_real-v_FC))/v_real
return (V)
}
names(DF)
c(Y_name, exclude_names)
covariatesUse <- names(DF)[! names(DF) %in%  c(Y_name, exclude_names)]
covariatesUse
covariatesUse <- names(DF)[! names(DF) %in%  c(Y_name, exclude_names)]
fit <- as.formula(paste(Y_name, "~", paste(covariatesUse, collapse = "+")))
model2 <- DF[complete.cases(DF[, .SD, .SDcols = c(covariatesUse)])]
model2 <- model2[, c(covariatesUse, Y_name), with=FALSE]
# Perform a cross-validation.
number.of.folds <- 5
set.seed(1234)
train <- copy(model2)
input.variables <- covariatesUse
# test.fold <- 1
folds <- createFolds(train[, get(Y_name)], k = number.of.folds, list = T)
total.accuracy <- data.table()
ACC <- c()
for(test.fold in 1:number.of.folds) {
# Divide into train and test.
train.fold.indices <- which(!(1:number.of.folds) %in% test.fold)
training.data <- train[ unlist(folds[train.fold.indices]), ]
test.data <- train[ folds[[test.fold]], ]
# The model.
dm.train  <- xgb.DMatrix(data = data.matrix(training.data[,.SD, .SDcols = covariatesUse]),
label = training.data[, get(Y_name)], missing = NA)
dm.test  <- xgb.DMatrix(data = data.matrix(test.data[,.SD, .SDcols = covariatesUse]),
label = test.data[, get(Y_name)], missing = NA)
set.seed(1234)
clf <- xgboost(data = dm.train,
nrounds = 1000,
booster = "gbtree",
objective = "reg:logistic",
tree_method = "approx",
eta = 0.01,
nthread = 6,
max_depth =15,
subsample = 0.95,
colsample_bytree = 0.95,
min_child_weight = 1,
gamma = 0.0,
#watchlist = watchlist,
#early.stop.round = 50,
maximize = T,
verbose = 1
)
name_clf <- paste0("clf_reg_", test.fold)
assign(name_clf, clf)
# Compute prediction.
Y_pred <- predict(clf, dm.test)
acc_value <- my_accuracy(test.data[,get(Y_name)], Y_pred)
accuracy <- data.table(Fold = test.fold,
id_estacion = test.data$id_station,
real_value = test.data[, get(Y_name)],
prob_value = Y_pred,
accuracy = acc_value)
s_acc <- sum(acc_value)/length(acc_value)
ACC <- c(ACC, s_acc)
total.accuracy <- rbind(total.accuracy, accuracy)
# mat <- xgb.importance (feature_names = covariatesUse, model = clf)
# xgb.plot.importance (importance_matrix = mat[1:20])
}
print(ACC)
summary(total.accuracy)
training.data <- model2
# The model.
dm.train  <- xgb.DMatrix(data = data.matrix(training.data[,.SD, .SDcols = covariatesUse]),
label = training.data[, get(Y_name)], missing = NA)
set.seed(1234)
boxplot(prob_value~Folds, data=total.accuracy)
boxplot(prob_value~Fold, data=total.accuracy)
tapply(prob_value, Fold, summary)
tapply(prob_value, Folds, summary)
tapply(total.accuracy$prob_value, total.accuracy$Fold, summary)
View(total.accuracy)
my_accuracy <- function(v_real, v_FC) {
V <- -(log(v_FC)*v_real+(1-v_real)*log(1-v_FC))
return (V)
}
name_clf <- paste0("clf_reg_", test.fold)
assign(name_clf, clf)
# Compute prediction.
Y_pred <- predict(get(Y_pred), dm.test)
ACC <- c()
# Compute prediction.
Y_pred <- predict(get(name_clf), dm.test)
name_clf
for(i in 1:5){
name_clf <- paste0("clf_reg_", i)
Y_pred <- predict(get(name_clf), dm.test)
acc_value <- my_accuracy(test.data[,get(Y_name)], Y_pred)
accuracy <- data.table(Fold = test.fold,
id_estacion = test.data$id_station,
real_value = test.data[, get(Y_name)],
prob_value = Y_pred,
accuracy = acc_value)
s_acc <- sum(acc_value)/length(acc_value)
ACC <- c(ACC, s_acc)
total.accuracy <- rbind(total.accuracy, accuracy)
}
ACC
i=1
name_clf <- paste0("clf_reg_", i)
# Compute prediction.
Y_pred <- predict(get(name_clf), dm.test)
Y_pred
acc_value <- my_accuracy(test.data[,get(Y_name)], Y_pred)
acc_value
my_accuracy <- function(v_real, v_FC) {
V <- -(log(v_FC)*v_real+(1-v_real)*log(1-v_FC))
return (V)
}
acc_value <- my_accuracy(test.data[,get(Y_name)], Y_pred)
accuracy <- data.table(Fold = test.fold,
id_estacion = test.data$id_station,
real_value = test.data[, get(Y_name)],
prob_value = Y_pred,
accuracy = acc_value)
s_acc <- sum(acc_value)/length(acc_value)
s_acc
v_FC <- test.data$is_high100
v_real <- test.data$is_high100
v_FC <- predict(clf_reg_1, test.fold)
v_FC <- predict(clf_reg_1, dm.test)
V <- -(log(v_FC)*v_real+(1-v_real)*log(1-v_FC))
mean(V)
v_real
log(v_FC)*v_real
(1-v_real)
(1-v_real)*log(1-v_FC)
(log(v_FC)*v_real+(1-v_real)*log(1-v_FC))
-(log(v_FC)*v_real+(1-v_real)*log(1-v_FC))
sum(my_accuracy(v_real, v_FC))
1*log(0.9979448)
1-0.0002053248
log(1-0.0002053248)
log(0.9956969)
print(ACC)
summary(total.accuracy)
training.data <- model2
# The model.
dm.train  <- xgb.DMatrix(data = data.matrix(training.data[,.SD, .SDcols = covariatesUse]),
label = training.data[, get(Y_name)], missing = NA)
set.seed(1234)
clf_reg_TOTAL <- xgboost(data = dm.train,
nrounds = 1000,
booster = "gbtree",
objective = "reg:linear",
tree_method = "approx",
eta = 0.01,
nthread = 6,
max_depth =15,
subsample = 0.95,
colsample_bytree = 0.95,
min_child_weight = 1,
gamma = 0.0,
#watchlist = watchlist,
#early.stop.round = 50,
maximize = T,
verbose = 1
)
my_accuracy <- function(v_real, v_FC) {
V <- -(log(v_FC)*(1-v_real)+(v_real)*log(1-v_FC))
return (V)
}
name_clf <- paste0("clf_reg_", i)
i
Y_pred <- predict(get(name_clf), dm.test)
acc_value <- my_accuracy(test.data[,get(Y_name)], Y_pred)
accuracy <- data.table(Fold = test.fold,
id_estacion = test.data$id_station,
real_value = test.data[, get(Y_name)],
prob_value = Y_pred,
accuracy = acc_value)
s_acc <- sum(acc_value)/length(acc_value)
ACC <- c(ACC, s_acc)
total.accuracy <- rbind(total.accuracy, accuracy)
ACC
ACC <- c()
for(i in 1:5) {
name_clf <- paste0("clf_reg_", i)
Y_pred <- predict(get(name_clf), dm.test)
acc_value <- my_accuracy(test.data[,get(Y_name)], Y_pred)
accuracy <- data.table(Fold = test.fold,
id_estacion = test.data$id_station,
real_value = test.data[, get(Y_name)],
prob_value = Y_pred,
accuracy = acc_value)
s_acc <- sum(acc_value)/length(acc_value)
ACC <- c(ACC, s_acc)
total.accuracy <- rbind(total.accuracy, accuracy)
}
A
ACC
save(clf_reg_TOTAL, "xgb_prob_horari.RData")
save(clf_reg_TOTAL, file= "xgb_prob_horari.RData")
predict(clf_reg_TOTAL, dt.train)
predict(clf_reg_TOTAL, dm.train)
summary(total.accuracy$prob_value)
predict(clf_reg_TOTAL, dm.train)
summary(predict(clf_reg_TOTAL, dm.train))
print(ACC)
summary(total.accuracy)
training.data <- model2
covariatesUse
Y_name
# The model.
dm.train  <- xgb.DMatrix(data = data.matrix(training.data[,.SD, .SDcols = covariatesUse]),
label = training.data[, get(Y_name)], missing = NA)
set.seed(1234)
clf_reg_TOTAL <- xgboost(data = dm.train,
nrounds = 1000,
booster = "gbtree",
objective = "reg:logistic",
tree_method = "approx",
eta = 0.01,
nthread = 6,
max_depth =15,
subsample = 0.95,
colsample_bytree = 0.95,
min_child_weight = 1,
gamma = 0.0,
#watchlist = watchlist,
#early.stop.round = 50,
maximize = T,
verbose = 1
)
summary(predict(clf_reg_TOTAL, dm.train))
probability_values <- (predict(clf_reg_TOTAL, dm.train))
model2$prob_NO2 <- probability_values
model2
probability_values
model2[, c(id_station, year, month)]
model2[, c("id_station", "year", "month")]
model2[, c("id_station", "year", "month", "day", "hour")]
model2[, c("id_station", "year", "month", "day", "hour", "prob_NO2")]
mod3 <- model2[, c("id_station", "year", "month", "day", "hour", "prob_NO2")]
mod3[, fecha:= as.POSIXct(paste0(
year, ifelse(month < 10, "-0", "-"),
months, ifelse(day < 10, "-0", "-"),
day, ifelse(hour < 10, " 0", " "),
hour, "00:00")))]
mod3[, fecha:= as.POSIXct(paste0(
year, ifelse(month < 10, "-0", "-"),
months, ifelse(day < 10, "-0", "-"),
day, ifelse(hour < 10, " 0", " "),
hour, "00:00"))]
str(mod3)
paste0(
year, ifelse(month < 10, "-0", "-"),
months, ifelse(day < 10, "-0", "-"),
day, ifelse(hour < 10, " 0", " "),
hour, "00:00")
mod3[, fecha:= as.POSIXct(paste0(
year, ifelse(month < 10, "-0", "-"),
months ifelse(day < 10, "-0", "-"),
day, ifelse(hour < 10, " 0", " "),
hour, "00:00"))]
mod3[, fecha:= as.POSIXct(paste0(
year, ifelse(month < 10, "-0", "-"),
month, ifelse(day < 10, "-0", "-"),
day, ifelse(hour < 10, " 0", " "),
hour, "00:00"))]
mod3
mod3[, c("fecha", "id_station", "prob_NO2")]
mod3 <- merge(DF["fecha", "id_station"], mod3, by.x=c("fecha", "id_station"), by.y=c("fecha", "id_station"))
mod3 <- merge(DF[,c("fecha", "id_station")], mod3, by.x=c("fecha", "id_station"), by.y=c("fecha", "id_station"))
DF[,c("fecha", "id_station")]
mod3
mod3 <- merge(DF[,c("fecha", "id_station")], mod3, by.x=c("fecha", "id_station"), by.y=c("fecha", "id_station"), all.x=T)
DF[,c("fecha", "id_station")]
DF
mod3 <- merge(DF[,c("date", "id_station")], mod3, by.x=c("date", "id_station"), by.y=c("fecha", "id_station"), all.x=T)
DF[,c("date", "id_station")]
mod3
str(mod3)
str(DF)
DF[,c("date", "id_station")]
mod3
mod3[, fecha:= as.POSIXct(paste0(
year, ifelse(month < 10, "-0", "-"),
month, ifelse(day < 10, "-0", "-"),
day, ifelse(hour < 10, " 0", " "),
hour, "00:00"))]
mod3
mod3[, fecha:= (paste0(
year, ifelse(month < 10, "-0", "-"),
month, ifelse(day < 10, "-0", "-"),
day, ifelse(hour < 10, " 0", " "),
hour, "00:00"))]
mod3
mod3[, fecha:= (paste0(
year, ifelse(month < 10, "-0", "-"),
month, ifelse(day < 10, "-0", "-"),
day, ifelse(hour < 10, " 0", " "),
hour, ":00:00"))]
mod3
mod3[, fecha:= as.POSIXct(paste0(
year, ifelse(month < 10, "-0", "-"),
month, ifelse(day < 10, "-0", "-"),
day, ifelse(hour < 10, " 0", " "),
hour, ":00:00"))]
mod3 <- merge(DF[,c("date", "id_station")], mod3, by.x=c("date", "id_station"), by.y=c("fecha", "id_station"), all.x=T)
mod3
summary(mod3)
write.table(mod3[, c("fecha", "id_station", "prob_NO2")], "00_Dataset/xgb_2014.csv", sep=";")
# Miquel
library(data.table)
library(ggplot2)
library(lubridate)
library(randomForest)
library(caret)
library(Metrics)
dt=fread("00_Dataset/dataset_main.csv",sep=";")
dt[,date:=as.POSIXct(date)]
install.packages("randomForest")
install.packages("Metrics")
library(data.table)
library(ggplot2)
library(lubridate)
library(randomForest)
library(caret)
library(Metrics)
dt=fread("00_Dataset/dataset_main.csv",sep=";")
dt[,date:=as.POSIXct(date)]
dt=unique(dt)
dt=dt[order(id_station,date)]
# Transform data set to train
dat<-dt[year==2014,-c("date","lat","lon", "day","fecha","holidays","wday","year_day","week_num","y","FC_today","FC_yesterday"),with=FALSE]
dat[,hour:=as.factor(hour)]
dat[,month:=as.factor(month)]
dat[,weekday:=as.factor(weekday)]
dat[,id_station:=as.factor(id_station)]
dummy<-dummyVars( ~weekday+hour+month+id_station, data = dat, sep=NULL)
colin<-colnames(dat[,-c("weekday","hour","month","id_station","no2"),with=FALSE])
# colin<-c("no2_2","height","FC_T_2","FC_Y_2","school","holidays_dummy",
#          "obs_hour","obs_day", "pred_hour", "pred_day","pred_year","pred_Yhour","pred_Yday","pred_Yyear")
dataset <- cbind.data.frame(dat[,..colin], as.data.frame(predict(dummy, newdata = dat)))
control <- trainControl(method="cv",
number=2,
verboseIter = TRUE,
allowParallel = TRUE)
seed <- 7
metric <- "RMSE"
tunegrid <- expand.grid(.mtry=c(10,20))
tunegrid <- expand.grid(.mtry=c(10,15))
rf_default <- train(no2_2~.,
data=dataset,
method="rf",
metric=metric,
tuneGrid=tunegrid,
trControl=control)
save(rf_default, "RF_Miquel.RData")
save(rf_default, file="RF_Miquel.RData")
control <- trainControl(method = "none",
summaryFunction = twoClassSummary,
classProbs = TRUE,
verboseIter = TRUE,
allowParallel = TRUE)
# probability model
dataset[,y:=ifelse(no2_2>100,1,0)]
dataset[,y:=factor(y, levels = c(0,1), labels = c("no", "yes"))]
metric <- "ROC"
tunegrid <- expand.grid(.mtry=c(15))
control <- trainControl(method = "none",
summaryFunction = twoClassSummary,
classProbs = TRUE,
verboseIter = TRUE,
allowParallel = TRUE)
rf_prob <- train(y~.,
data=dataset,
method="rf",
metric=metric,
tuneGrid=tunegrid,
trControl=control)
save(rf_prob, file = "rf_prob.rdata")
save(rf_default, file = "rf_reg.rdata")
results_join <- read.table("D:/results_join.txt", quote="\"", comment.char="")
View(results_join)
targets <- fread("00_Dataset/Original_Folder/targets.csv", sep=",")
targets <- targets[,date := as.Date(date)]
days_to_predict <- unique(as.character(targets$date))
days_to_predict
rep(days_to_predict, 7)
DTP <- rep(days_to_predict, 7)
order(DTP)
DTP[order(DTP)]
DTP <- DTP[order(DTP)]
DTP
targets$station
unique(targets$station)
st <- unique(targets$station)
st[order(dt)]
st[order(st)]
st <- rep(unique(targets$station),7)
st
st <- unique(targets$station),7
st <- st[order(st)]
st <- unique(targets$station)
st <- st[order(st)]
st <- rep(st, 7)
targets
targets
data.frame(date = DTP, station = st, target = results_join$V1 )
st
st <- rep(st, 121)
data.frame(date = DTP, station = st, target = results_join$V1 )
A <- data.frame(date = DTP, station = st, target = results_join$V1 )
targets
merge(targets[, c("date", "station")], A)
merge(targets[, c("date", "station")], A, by.x= c("date", "station"), by.y= c("date", "station"), all.x=T)
targets
setDT(A)
merge(targets[, c("date", "station")], A, by.x= c("date", "station"), by.y= c("date", "station"), all.x=T)
targets
str(A)
A <- data.frame(date = as.character(DTP), station = as.character(st), target = results_join$V1 )
setDT(A)
merge(targets[, c("date", "station")], A, by.x= c("date", "station"), by.y= c("date", "station"), all.x=T)
str(A)
A <- data.frame(date = as.character(DTP), station = as.character(st), target = results_join$V1 )
setDT(A)
str(A)
A$date <- as.character(A$date)
A$station <- as.character(A$station)
str(A)
merge(targets[, c("date", "station")], A, by.x= c("date", "station"), by.y= c("date", "station"), all.x=T)
targets
str(targets)
A$date <- as.Date(A$date)
merge(targets[, c("date", "station")], A, by.x= c("date", "station"), by.y= c("date", "station"), all.x=T)
targets
A
targets <- fread("00_Dataset/Original_Folder/targets.csv", sep=",")
targets <- targets[,date := as.Date(date)]
days_to_predict <- unique(as.character(targets$date))
DTP <- rep(days_to_predict, 7)
DTP <- DTP[order(DTP)]
st <- unique(targets$station)
st <- st[order(st)]
st <- rep(st, 121)
A <- data.frame(date = as.character(DTP), station = as.character(st), target = results_join$V1 )
setDT(A)
A$date <- as.Date(A$date)
A$station <- as.character(A$station)
to_deliver <- merge(targets[, c("date", "station")], A, by.x= c("date", "station"), by.y= c("date", "station"), all.x=T)
to_deliver
write.table(to_deliver, "02_Submissions/wax_to_deliver.csv", sep=",", row.names = F)
to_deliver <- to_deliver[, c("target")]
write.table(to_deliver, "02_Submissions/wax_to_deliver.csv", sep=",", row.names = F)
results_join <- read.table("D:/datathon/results_join_2.txt", quote="\"", comment.char="")
View(results_join)
targets <- fread("00_Dataset/Original_Folder/targets.csv", sep=",")
targets <- targets[,date := as.Date(date)]
days_to_predict <- unique(as.character(targets$date))
DTP <- rep(days_to_predict, 7)
DTP <- DTP[order(DTP)]
st <- unique(targets$station)
st <- st[order(st)]
st <- rep(st, 121)
A <- data.frame(date = as.character(DTP), station = as.character(st), target = results_join$V1 )
setDT(A)
A$date <- as.Date(A$date)
A$station <- as.character(A$station)
to_deliver <- merge(targets[, c("date", "station")], A, by.x= c("date", "station"), by.y= c("date", "station"), all.x=T)
to_deliver <- to_deliver[, c("target")]
write.table(to_deliver, "02_Submissions/wax_to_deliver2.csv", sep=",", row.names = F)
results_join_5 <- read.table("C:/Users/xavier.ros.roca/Downloads/results_join_5.txt", quote="\"", comment.char="")
View(results_join_5)
results_join <- read.table("C:/Users/xavier.ros.roca/Downloads/results_join_5.txt", quote="\"", comment.char="")
targets <- fread("00_Dataset/Original_Folder/targets.csv", sep=",")
targets <- targets[,date := as.Date(date)]
days_to_predict <- unique(as.character(targets$date))
DTP <- rep(days_to_predict, 7)
DTP <- DTP[order(DTP)]
st <- unique(targets$station)
st <- st[order(st)]
st <- rep(st, 121)
A <- data.frame(date = as.character(DTP), station = as.character(st), target = results_join$V1 )
setDT(A)
A$date <- as.Date(A$date)
A$station <- as.character(A$station)
to_deliver <- merge(targets[, c("date", "station")], A, by.x= c("date", "station"), by.y= c("date", "station"), all.x=T)
to_deliver <- to_deliver[, c("target")]
write.table(to_deliver, "02_Submissions/wax_to_deliver3.csv", sep=",", row.names = F)
gc()
